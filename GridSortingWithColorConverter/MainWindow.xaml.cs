using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace GridSortingWithColorConverter
{
	public class BrushColorConverter : IMultiValueConverter
	{
		public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
		{
			Debug.WriteLine("Converter Called: " + values[0] + " , " +  values[1]);
			if ((int)values[1] < 18) return new SolidColorBrush(Color.FromRgb(250, 0, 0));
			if (60 > (int)values[1] && (int)values[1] > 18) return new SolidColorBrush(Color.FromRgb(0, 250, 0));
			return new SolidColorBrush(Color.FromRgb(0, 0, 250));
			
		}

		public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class MainWindow : Window
	{
		PeopleViewModel vm = new PeopleViewModel();
		public MainWindow()
		{
			InitializeComponent();

			DataContext = vm;
		}

		private void AutoGeneratedColumns(object sender, EventArgs e)
		{
			var dg = (DataGrid)sender;
			dg.Columns.Clear();
			var columsInfo = new List<string>{ "Name", "Age"};


			for (var i = 0; i < columsInfo.Count; i++)
			{
				var dataTemplate = new DataTemplate
				{
					DataType = typeof(TextBlock)
				};

				var textBlockFactory = new FrameworkElementFactory(typeof(TextBlock));
				textBlockFactory.SetValue(TagProperty, columsInfo[i]);
				textBlockFactory.SetValue(NameProperty, columsInfo[i]);
				textBlockFactory.SetValue(BackgroundProperty, new SolidColorBrush(Colors.White));
				textBlockFactory.AddHandler(MouseLeftButtonDownEvent, new MouseButtonEventHandler(OnCellMouseLeftButtonDown));
				textBlockFactory.SetBinding(TextBlock.TextProperty, new Binding
				{
					Path = new PropertyPath(columsInfo[i], null),
					Mode = BindingMode.TwoWay,
					UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
				});

				var mb = new MultiBinding();
				mb.Bindings.Add(new Binding { Path = new PropertyPath("Name", null) });
				mb.Bindings.Add(new Binding { Path = new PropertyPath("Age", null) });
				mb.Converter = new BrushColorConverter();
				textBlockFactory.SetBinding(TextBlock.BackgroundProperty, mb);

				dataTemplate.VisualTree = textBlockFactory;

				dg.Columns.Add(
					new DataGridTemplateColumn
					{
						Header = columsInfo[i],
						CellTemplate = dataTemplate,
						SortMemberPath = "Name"
					});
			}
		}

		private void OnCellMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
		{
			Debug.WriteLine("");
			Debug.WriteLine("Age Incremented");
			vm.People.First().Age++;
		}
	}
}
